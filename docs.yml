swagger: "2.0"
info:
  description: |
    <p>Документ описывает интеграцию серверной части приложения Московский Транспорт (МТ) и сервисом каршеринга.</p>
    <p>Данный API предстоит реализовать сервису каршеринга.</p>
    <p>Доступ к API каршеринга должен быть ограничен списоком разрешённых IP адресов МТ.</p>
    <p>Доступ к API на стороне МТ будет ограничен списоком IP адресов каршеринг сервисов, а также уникальным API ключом для каждого каршеринга. Данный API ключ необходимо передавать в HTTP заголовке Api-Key.</p>
    <p>Для работы с API каршеринга, МТ должен получить API токен для каждого пользователя (см. ниже метод POST /token). Токен передаётся в каждый метод в HTTP заголовке User-Token.</p>
    <h2>&#9888; Вопросы на проработку</h2>
    <p>
      <ol>
      <li>Согласовать список возможных причин, по которым пользователь не может забронировать текущий автомобиль (поле forbiddenRentReason)</li>
      <li>Требуется согласовать список возможных ошибок с операторами при брони автомобиля (ErrorRideCreationEntity)</li>
    </ol>
    </p>
  title: "MT + сервисы каршеринга"
tags:
  - name: "carsharing"
    description: "API методы реализованные на стороне каршеринг-сервиса"
  - name: "mt"
    description: "API методы реализованные на стороне МТ"
schemes:
  - "https"
paths:
  /token:
    post:
      tags:
        - "carsharing"
      summary: "Получение авторизационного токена для работы с API"
      description: |
        <p>Метод принимает номер телефона пользователя, который намеревается начать работу с системой каршеринга. Номер телефона заранее был верифицирован СМС сообщением на стороне МТ.</p>
        <p>Время жизни предоставленного токена - 14 дней, по истечению которых токен необходимо запросить заново.</p>
        <p>При наличии авторизационных систем на стороне каршеринга возможна передача токена, который будет получен из этой системы (например, Яндекс.Паспорта).</p>
        <p>В случае, если на этот номер телефона есть зарегистрированный пользователь и он имеет права на использования сервиса - метод возвращает API токен, который будет использован при обращении к другим методах.</p>
        </p>
      operationId: "tokenCreate"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Данные для получения токена"
          required: true
          schema:
            $ref: "#/definitions/TokenDto"
      responses:
        "200":
          description: "Успех операции"
          schema:
            $ref: "#/definitions/TokenEntity"
        "400":
          description: "Ошибка при выдаче токена"
          schema:
            $ref: "#/definitions/ErrorTokenCreationEntity"

  /policy:
    get:
      tags:
        - "carsharing"
      summary: "Получение текста политики конфиденциальности и правил сервиса"
      description: |
        <p>Метод возвращает текст правил и политики конфиденциальности сервиса, которые пользователь должен принять при работе с сервисом.</p>
        <p>Предусмотрен параметр updatedAt, в котором необходимо передавать дату последнего обновления текста. Данное поле необходимо, чтобы получить повторное согласие пользователя в случае обновления правил.</p>
      operationId: "policyGet"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Успех операции"
          schema:
            $ref: "#/definitions/PolicyEntity"
      security:
        - { }
        - user_token: [ ]

  /car/{id}:
    get:
      tags:
        - "carsharing"
      summary: Получение информации об автомобиле"
      description: |
        <p>Метод используется для вывода информации об автомобиле и доступных тарифах для него.</p>
        <p>Метод вызывается в момент открытии пользователем карточки автомобиля.</p>
        <p>Метод может вызываться без передачи авторизационного токена - в этом случае информация
        должна возвращаться для неавторизованного пользователя. Для такого пользователя
        допустимо возвращении стоимости в различном диапазоне (например, стоимость минуты поездки от 7 до 10 рублей).
        Для авторизованного состояния для вывода стоимости будет использована минимальная граница (поле min).
        </p>
      operationId: "carGet"
      parameters:
        - name: "id"
          in: "path"
          description: "ID автомобиля из РНИС"
          required: true
          type: "string"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "401":
          description: |
            Переданный токен невалиден. Ошибка возникает в случае если переданный
            токен пользователя является невалидным (устарел или не существует).
        "200":
          description: "Успех операции"
          schema:
            $ref: "#/definitions/CarEntity"
      security:
        - { }
        - user_token: [ ]

  /ride:
    get:
      tags:
        - "carsharing"
      summary: "Возвращает информацию об активной поездке пользователя"
      description: |
        Метод возвращает сушность активной поездки пользователя. В случае, если поездка не найдена - метод
        возвращает HTTP код 404.
      operationId: "currentRideGet"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Успех операции"
          schema:
            $ref: "#/definitions/RideEntity"
        "404":
          description: "Активная поездка отсутствует"
        "401":
          description: "Переданный токен невалиден"
      security:
        - user_token: [ ]

    post:
      tags:
        - "carsharing"
      summary: "Бронирование автомобиля за пользователем"
      description: |
        <p>Метод брони автомобиля за пользователем.</p>
        <p>В момент создания брони на стороне каршеринг сервиса
        происходит холдирование средств за поездку. </p>
      operationId: "rideCreate"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Данные для бронирования автомобиля"
          required: true
          schema:
            $ref: "#/definitions/RideDto"
      responses:
        "200":
          description: "Успех операции"
          schema:
            $ref: "#/definitions/RideEntity"
        "400":
          description: "Ошибка при бронировании"
          schema:
            $ref: "#/definitions/ErrorRideCreationEntity"
        "401":
          description: "Переданный токен невалиден"
      security:
        - user_token: [ ]

  /ride/{id}:
    get:
      tags:
        - "carsharing"
      summary: "Получение брони по ID"
      description: "Метод возвращает сущность поездки, аналогичную методу создания."
      operationId: "rideGet"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID поездки"
          required: true
          type: "string"
      responses:
        "200":
          description: "Успех операции"
          schema:
            $ref: "#/definitions/RideEntity"
        "401":
          description: "Переданный токен невалиден"
        "404":
          description: "Поездка с переданным ID не найдена"
      security:
        - user_token: [ ]

  /ride/{id}/cancel:
    post:
      tags:
        - "carsharing"
      summary: "Отмена брони"
      description: "Метод возвращает сущность бронирования, аналогичную методу создания."
      operationId: "rideCancel"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID поездки"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Данные для отмены брони"
          required: true
          schema:
            $ref: "#/definitions/RideCancelDto"
      responses:
        "200":
          description: "Успех операции"
          schema:
            $ref: "#/definitions/RideEntity"
        "400":
          description: "Ошибка при бронировании"
          schema:
            $ref: "#/definitions/ErrorRideCancelEntity"
        "401":
          description: "Переданный токен невалиден"
      security:
        - user_token: [ ]

  /zone-set/{id}:
    get:
      tags:
        - "carsharing"
      summary: "Получение набора зон по ID"
      description: |
        Метод возвращает набор зон, в которых возможно совершить поездку, запрещённые и доступные для завершения аренды.
        В метод передаётся ID набора зон, который приходит в карточке автомобиля (availableZoneSet.id).
        Вызов метода будет происходить в том случае, если информация о наборе зон с таким ID отсутствует в БД МТ, или набор зон был обновлён (параметр availableZoneSet.updatedAt в карточке автомобиля)
      operationId: "zoneSetGet"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID набора зон"
          required: true
          type: "string"
      responses:
        "200":
          description: "Набор зон"
          schema:
            $ref: "#/definitions/ZoneSetEntity"
        "404":
          description: "Набор зон с переданным ID не найден"
      security:
        - user_token: [ ]

  /ride-info:
    post:
      deprecated: true
      tags:
        - "mt"
      summary: "Оповещение об изменениях в поездке"
      description: |
        <p>Метод для оповещения изменении поездки на стороне сервиса каршеринга.</p>
        <p>Адрес метода: <b>POST https://carsharing.moscowtransport.app/ride</b></p>
        <p>Метод вызывается каршеринг-сервисом в момент изменения состояния поездки:
          <ul>
            <li>отмена поездки пользователем в приложении каршеринга;</li>
            <li>начало поездки;</li>
            <li>завершение поездки;</li>
            <li>найден штраф по поездке;</li>
            <li>оплачен штраф по поездке;</li>
            <li>перевод автомобиля в режим ожидания.</li>
          </ul>
        </p>
      operationId: "rideNotification"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Данные поездки"
          required: true
          schema:
            $ref: "#/definitions/RideEntity"
      responses:
        "200":
          description: "Успех операции"

securityDefinitions:
  user_token:
    type: "apiKey"
    description: "Токен пользователя, полученный в рамках вызова метода POST /token"
    name: "UserToken"
    in: "header"
definitions:
  TokenDto:
    type: "object"
    properties:
      phoneNum:
        type: "integer"
        description: "Номер телефона в формате <i>70000000000</i> (только цифры)"

  RideDto:
    type: "object"
    properties:
      carId:
        type: "string"
        description: "ID автомобиля"
      rateId:
        type: "string"
        description: "ID тарифа"
      userLocation:
        description: "Позиция пользователя в момент оформления заказа"
        $ref: "#/definitions/LocationDto"

  RideCancelDto:
    type: "object"
    properties:
      userLocation:
        $ref: "#/definitions/LocationDto"

  RideEntity:
    type: "object"
    properties:
      id:
        description: "ID поездки"
        type: "string"
      deepLink:
        type: "string"
        description: "Диплинк для перехода в приложение каршеринг сервиса"
      specialMessage:
        type: "string"
        description: "Сообщение, которое можно вывести в карточке автомобиля при необходимости"
      finesDescription:
        type: "string"
      car:
        description: "Информация об автомобиле"
        $ref: "#/definitions/RideCarEntity"
      waiting:
        description: "Информация о времени ожидания"
        $ref: "#/definitions/RideWaitingInfoEntity"
      rate:
        description: "Информация о используемом тарифе в рамках этой брони"
        $ref: "#/definitions/RateEntity"
      pointStart:
        description: "Точка старта поездки (откуда поездка была начата - по сути является точкой автомобиля при брони)"
        $ref: "#/definitions/LocationEntity"
      pointFinish:
        description: "Точка завершения поездки"
        $ref: "#/definitions/LocationEntity"
      createdAt:
        type: "integer"
        description: "Время создания брони в формате timestamp (секунды)"
        example: 1637917148
      startedAt:
        type: "integer"
        description: "Время старта поездки в формате timestamp (секунды)"
        example: 1637917148
      canceledAt:
        type: "integer"
        description: "Время отмены брони в формате timestamp (секунды)"
        example: 1637917148
      finishedAt:
        type: "integer"
        description: "Время завершения поездки в формате timestamp (секунды)"
        example: 1637917148
      features:
        $ref: "#/definitions/RideFeaturesEntity"
      distance:
        type: number
        description: "Дистанция в метрах, которую проехал пользователь в рамках поездки"
        example: 120
      price:
        type: number
        description: "Стоимость поездки в рублях"
        example: 120.4
      duration:
        type: number
        description: "Длительность поездки в секундах"
        example: 1800
      status:
        type: "string"
        description: "Статус поездки"
        enum:
          - active
          - waiting
          - finished
          - canceled
          - inspection

  RideCarEntity:
    type: "object"
    properties:
      id:
        type: "string"
      fuelCapacity:
        $ref: "#/definitions/FuelCapacity"
      position:
        $ref: "#/definitions/LocationEntity"
      number:
        type: "string"
        description: "Гос. номер автомобиля"
        example: "у522уу799"
      model:
        type: "string"
        description: "Марка + модель автомобиля"
        example: "BMW 3-series"

  RideFeaturesEntity:
    type: "object"
    properties:
      warmup:
        type: "boolean"
        description: "Доступна возможность удалённого прогрева автомобиля"
      wink:
        type: "boolean"
        description: "Доступна возможность удалённо «помигать» автомобилем"

  RideWaitingInfoEntity:
    type: "object"
    properties:
      freeUntil:
        type: "integer"
        description: "Время в формате timestamp (секунды) до которого время ожидания является бесплатным"
      pricePerMin:
        type: "number"
        description: "Стоимость минуты ожидания в рублях"
        example: 2.55

  TokenEntity:
    type: "object"
    description: |
      Токен конкретного пользователя для работы с API методами.
    properties:
      token:
        type: "string"
        description: "16 символьный уникальный токен для пользвателя."
      validUntil:
        type: "integer"
        description: "Дата в формате timestamp, до которой токен будет валидный (секунды)"
        example: 1637907497

  PolicyEntity:
    type: "object"
    properties:
      content:
        type: "string"
        description: "Текст правил сервиса и политики конфиденциальности"
      updatedAt:
        type: "integer"
        description: "Дата изменения правил в timestamp (секунды)"
        example: 1637907497

  FuelCapacity:
    type: "object"
    properties:
      value:
        type: "number"
        description: "Доступный уровень топлива для автомобиля в километрах или %"
        example: 12.4
      oneOf:
        type: "string"
        enum:
          - km
          - percent

  CarEntity:
    type: "object"
    properties:
      id:
        type: "string"
      fuelCapacity:
        $ref: "#/definitions/FuelCapacity"
      carNum:
        type: "string"
        description: "Гос. номер автомобиля"
        example: "у522уу799"
      prePaymentInformation:
        type: "string"
        description: "Информация для пользователя о списания за поездку. Здесь можно передать информацию о бонусном списании или другую вспомогательную информации об оплате за поездку на этом автомобиле."
      model:
        type: "string"
        description: "Марка + модель автомобиля"
        example: "BMW 3-series"
      availableZoneSet:
        $ref: "#/definitions/AvailableZoneSetEntity"
      location:
        $ref: "#/definitions/LocationEntity"
      insurancePolicy:
        $ref: "#/definitions/CarInsurancePolicyEntity"
      forbiddenRentReason:
        type: "string"
        description: |
          Код причины, по которой пользователю может быть недоступен этот автомобиль.
          В случае, если автомобиль доступен для текущего пользователя значение поля
          следует оставить в null (или пользователь неавторизован). Возможные коды ошибок:
          <i>lowDriverExperience</i> - низкий стаж вождения
          <i>lowServiceExperience</i> - низкий уровень доверия в сервисе
          <i>other</i> - другие причины
        enum:
          - lowDriverExperience
          - lowServiceExperience
          - other
      rate:
        type: "array"
        description: "Доступные тарифы для автомобиля"
        items:
          $ref: "#/definitions/RateEntity"

  CarInsurancePolicyEntity:
    properties:
      description:
        type: "string"
        description: "Текстовая информация, которая выводится для пользователя в поле с описанием страховки"

  AvailableZoneSetEntity:
    type: object
    properties:
      id:
        type: "string"
        description: "ID набора зон"
      updatedAt:
        type: "integer"
        description: "Дата изменения набора данных в timestamp (секунды)"
        example: 1637907497

  RateEntity:
    type: "object"
    description: |
      <p>Описание тарифа пользования автомобилем. В случае, если пользозователь неавторизован, есть возможность
      передавать стоимость в диапазоне от...до (см. поля min/max в сущности OfferRangeEntity). </p>
      <p>Для авторизованного пользователя в поля min/max следует передавать одинаковую стоимость.</p>
    properties:
      id:
        type: "string"
      description:
        type: string
        description: |
          Подробное описание тарифа с поддержкой html тегов: h1, p, strong, img
      name:
        type: "string"
        description: "Название тарифа"
        example: "Поминутный"
      usagePrice:
        type: number
        description: Стоимость посадки в рублях
        example: 100.55
      holdAmount:
        type: number
        description: Сумма предсписания в рублях
        example: 202.55
      offerParking:
        description: "Стоимость тарифа для режима ожидания"
        $ref: "#/definitions/OfferRangeEntity"
      offerRiding:
        description: "Стоимость тарифа для режима поездки"
        $ref: "#/definitions/OfferRangeEntity"
      freeWaitingTime:
        type: "integer"
        description: "Время бесплатного ожидания в минутах. Если бесплатного времени ожидания не предусмотрено, следует пустое значение (null)."

  OfferRangeEntity:
    type: "object"
    properties:
      min:
        type: "number"
        description: "Минимальная стоимость в рублях"
        example: 7.99
      max:
        type: "number"
        description: "Максимальная стоимость в рублях"
        example: 10.99

  ZoneSetEntity:
    type: "object"
    properties:
      id:
        description: "ID набора зон"
      availableForDriving:
        type: "string"
        description: "Геозона (encoded polyline) поездки - зона, в рамках которой можно совершать поездку"
      forbiddenComplete:
        type: "array"
        items:
          $ref: "#/definitions/ZoneEntity"
        description: "Массив зон (encoded polyline), где запрещено завершать аренду (но можно перевести в режим ожидания)"
      allowComplete:
        type: "array"
        items:
          $ref: "#/definitions/ZoneEntity"
        description: "Массив зон (encoded polyline), где можно переводить в режим ожидания и завершать аренду"

  ZoneEntity:
    type: "object"
    properties:
      polyline:
        type: "string"
        description: "encoded polyline"
      shortDescription:
        type: "string"
        example: "Если поездка выйдет дешевле 1170Р, с карты дополнительно спишется недостающая разница"
      description:
        type: "string"
        example: "Подробное описание зоны с поддержкой зоны h1, p, strong, img"
      name:
        type: "string"
        example: "SVO, 1134Р"
      mapLabel:
        type: "string"
        example: "SVO"

  LocationDto:
    type: "object"
    properties:
      lat:
        type: "number"
        description: "Широта"
        example: 55.747534
      lon:
        type: "number"
        description: "Долгота"
        example: 37.626030

  LocationEntity:
    type: "object"
    properties:
      address:
        type: "string"
        example: "Москва, ул. Тверская, д. 13"
      lat:
        type: "number"
        description: "Широта"
        example: 55.747534
      lon:
        type: "number"
        description: "Долгота"
        example: 37.626030

  ErrorRideCreationEntity:
    type: "object"
    properties:
      errorCode:
        type: "string"
        description: |
          Код ошибки при бронировании автомобиля. Коды ошибок:
          <ul>
            <li>carAlreadyBooked - машина уже забронирована другим пользователем;</li>
            <li>userHasRide - у пользователя уже есть активная поездка или бронь;</li>
            <li>depricatedPolicy - принятая пользователем оферта устарела;</li>
            <li>userBlocked - пользователь заблокирован;</li>
            <li>other - другая ошибка, которую на данный момент не поддерживает логика МТ.</li>
          </ul>
        enum:
          - carAlreadyBooked
          - userHasRide
          - depricatedPolicy
          - userBlocked
          - other

  ErrorTokenCreationEntity:
    type: "object"
    properties:
      errorCode:
        type: "string"
        description: |
          Код ошибки при бронировании автомобиля. Коды ошибок:
          <ul>
          <li>Пользователь не зарегистрирован в системе (код ошибки userNotFound)</li>
          <li>Пользователь не подтверждён - пользователю требуется пройти идентификацию документов или дождаться её завершения (код ошибки needConfirmation)</li>
          <li>Пользователь заблокирован (код ошибки blocked)</li>
          <li>Другая причина (код ошибки other)</li>
          </ul>
        enum:
          - userNotFound
          - needConfirmation
          - blocked
          - other

  ErrorRideCancelEntity:
    type: "object"
    properties:
      errorCode:
        type: "string"
        description: |
          Код ошибки при бронировании автомобиля. Коды ошибок:
          <ul>
            <li>rideNotFound - поездка с переданным ID не найдена;</li>
            <li>rideAlreadyCanceled - поездка с переданным ID уже отменена;</li>
            <li>rideInProgress - поездку нельзя отменить, т.к. поездка в данный момент активна</li>
          </ul>
        enum:
          - rideNotFound
          - rideAlreadyCanceled
          - rideInProgress

  ErrorEntity:
    type: "object"
    properties:
      errorCode:
        type: "string"